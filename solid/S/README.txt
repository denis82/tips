S – Принцип единственной ответственности. 

Определение: У класса/модуля должна быть лишь одна причина для изменения. 

Смысл принципа: Борьба со сложностью, важность которой резко возрастает при развитии логики приложения. 
Краткое описание: Любой сложный класс должен быть разбит на несколько простых составляющих,
отвечающих за определенный аспект поведения, что упрощает как понимание, так и будущее развитие. 


Типовые примеры нарушения: 

1) смешивание логики и инфраструктуры: бизнес-логика смешана с представлением,
 слоем персистентности, находится внутри WCF или windows-сервисов и т.п. 

2) класс/модуль решает задачи разных уровней абстракции: вычисляет CRC и отправляет
 уведомления по электронной почте; разбирает json-объект и анализирует его содержимое и т.п. 


Anti-SRP – Принцип размытой ответственности.
Чрезмерная любовь к SRP ведет к обилию мелких классов/методов и размазыванию логики между ними.