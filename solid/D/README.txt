D – Принцип инверсии зависимостей 


Определение: Модули верхнего уровня не должны зависеть от модулей нижнего уровня.
И те и другие должны зависеть от абстракций. 


Смысл: сделать ключевые и/или изменчивые зависимости класса явными. 


Краткое описание: слишком большое число зависимостей класса говорит о проблемах в дизайне. 
Возможно класс делает слишком многое, или же текущий класс не удачен, 
что приводит к необходимости дергания по одному методу у слишком большого 
числа зависимостей. Любой объектный дизайн представляет собой некоторый граф 
взаимодействующих объектов, при этом некоторые зависимости являются частью 
реализации и должны создаваться напрямую (композиция), а некоторые – передаваться 
ему извне (агрегация). Выделять зависимости особенно полезно, когда они являются 
изменчивыми (завязаны на окружения), или же представляют собой некоторую форму «стратегий». 


Типичные примеры нарушения: использование синглтонов, сервис-локаторов или же 
создание ключевых зависимостей класса по ходу дела в закрытых методах. 


Anti-DIP – Принцип инверсии сознания или DI-головного мозга. 
Интерфейсы выделяются для каждого класса и пачками передаются через конструкторы. 
Понять, где находится логика становится практически невозможно. 